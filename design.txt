You should implement two classes: MovieData and MovieTest with the following specifications:

MovieData has a constructor that takes a path to the folder containing the movie data (ml-100k for example) a second optional constructor can be used to specify that a particular base/training set pair should be read.

For example,

z = MovieData.new("ml-100k")
will read it all of the data in the 100,000 lines in “u.data” as the training set and will have an empty test set, while

z = MovieData.new('ml-100k',:u1) 
will read in the 80,000 lines in “u1.base” as the training set and the 20,000 lines in “u1.test” as the test set.

	This can be achieved with optional parameter assignment:
		initialize(folder, test = nil)
			if test == nil then default case read u.data end
			else use test "#{test}.base" and "#{test}.test"





MovieData also has several instance methods

z.rating(u,m) returns the rating that user u gave movie m in the training set, and 0 if user u did not rate movie m
z.predict(u,m) returns a floating point number between 1.0 and 5.0 as an estimate of what user u would rate movie m
z.movies(u) returns the array of movies that user u has watched
z.viewers(m) returns the array of users that have seen movie m
z.run_test(k) runs the z.predict method on the first k ratings in the test set and returns a MovieTest object containing the results.
The parameter k is optional and if omitted, all of the tests will be run.
MovieTest is generated by the z.run_test(k) and it stores a list of all of the results, where each result is a tuple containing the user, movie, rating, and the predicted rating.

The MovieTest object also has several instance methods:

t.mean returns the average predication error (which should be close to zero)
t.stddev returns the standard deviation of the error
t.rms returns the root mean square error of the prediction
t.to_a returns an array of the predictions in the form [u,m,r,p]. You can also generate other types of error measures if you want, but we will rely mostly on the root mean square error.
You should write comments for each of the methods of your two classes and use Rdoc to generate HTML documentation for the two classes. Put the documentation folder and the two classes in a folder called PA2, and upload PA2 to github.