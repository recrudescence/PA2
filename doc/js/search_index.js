var search_data = {"index":{"searchIndex":["moviedata","find_common_movies()","find_watched_similarity()","hash_movies()","hash_reviews()","load_data()","load_set()","most_similar()","movies()","new()","popularity()","popularity_list()","predict()","rating()","rating_difference()","run_test()","similarity()","traverse()","viewers()"],"longSearchIndex":["moviedata","moviedata#find_common_movies()","moviedata#find_watched_similarity()","moviedata#hash_movies()","moviedata#hash_reviews()","moviedata#load_data()","moviedata#load_set()","moviedata#most_similar()","moviedata#movies()","moviedata::new()","moviedata#popularity()","moviedata#popularity_list()","moviedata#predict()","moviedata#rating()","moviedata#rating_difference()","moviedata#run_test()","moviedata#similarity()","moviedata#traverse()","moviedata#viewers()"],"info":[["MovieData","","MovieData.html","","<p><strong>Calvin Wang</strong> <br> COSI 105B <br> Movies-2 <br> Things that\nwould be nice to add: OptionsParser for debug and filename! …\n"],["find_common_movies","MovieData","MovieData.html#method-i-find_common_movies","(user1, user2)","<p>Return the intersection of the movies reviewed by user1 and user2.\n"],["find_watched_similarity","MovieData","MovieData.html#method-i-find_watched_similarity","(common_movies, user1, user2)","<p>Return the % of user1&#39;s movies that are in common with user2. After\nall, we&#39;re seeing how similar …\n"],["hash_movies","MovieData","MovieData.html#method-i-hash_movies","(m_stats_set, m_id, rating, u_id)","<p>Creates a movie stats hashmap, movie_id =&gt; [item_count, item_total_r,\nitem_average_r]\n"],["hash_reviews","MovieData","MovieData.html#method-i-hash_reviews","(u_reviews, line_array)","<p>Creates a user_id =&gt; [movie id =&gt; [rating, timestamp]] k:v pair\n"],["load_data","MovieData","MovieData.html#method-i-load_data","()","<p>Loads input file data into respective data structures.\n"],["load_set","MovieData","MovieData.html#method-i-load_set","(location, user_set, movie_set)","<p>Reads file data and passes data into hashing methods.\n"],["most_similar","MovieData","MovieData.html#method-i-most_similar","(u, frontBack)","<p>Inserts a user&#39;s similarity value into the binary search tree if it is\nnot 0.\n"],["movies","MovieData","MovieData.html#method-i-movies","(user_id)","<p>Returns the array of movies that user u has watched.\n"],["new","MovieData","MovieData.html#method-c-new","(f, test)","<p>Initialize the MovieData object. Takes a path to the folder containing the\nmovie data (ml-100k for example) …\n"],["popularity","MovieData","MovieData.html#method-i-popularity","(movie_id)","<p>Popularity is defined as (number of reviews + (average rating * number of\nreviews)) Rationale: a movie&#39;s …\n"],["popularity_list","MovieData","MovieData.html#method-i-popularity_list","(frontBack)","<p>The popularity list is represented by a binary search tree. This allows\nfast gets, as well as ordered …\n"],["predict","MovieData","MovieData.html#method-i-predict","(user_id, movie_id)","<p>Returns a floating point number between 1.0 and 5.0 as an estimate of what\nuser u would rate movie m. …\n"],["rating","MovieData","MovieData.html#method-i-rating","(user_id, movie_id)","<p>Returns the rating that user u gave movie m in the training set,  and 0 if\nuser u did not rate movie …\n"],["rating_difference","MovieData","MovieData.html#method-i-rating_difference","(user1, user2, common)","<p>Returns a value (0 to 5.0) signifying the average rating difference between\nuser1 and user2.\n"],["run_test","MovieData","MovieData.html#method-i-run_test","(num_users = 0)","<p>Runs the z.predict method on the first k ratings in the test set and\nreturns a  MovieTest object containing …\n"],["similarity","MovieData","MovieData.html#method-i-similarity","(user1, user2)","<p>Basic assumption: we&#39;re seeing how similar user2 is to user1. So we\nweigh user1&#39;s preferences …\n"],["traverse","MovieData","MovieData.html#method-i-traverse","(bst, frontBack)","<p>Traverse the binary search tree, either in order or in reverse order.\n"],["viewers","MovieData","MovieData.html#method-i-viewers","(movie_id)","<p>Returns the array of users that have seen movie m.\n"]]}}